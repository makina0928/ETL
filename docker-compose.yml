version: "3.9"

services:
  # PostgreSQL Database for storing weather data
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - airflow_net

  # pgAdmin for visual management of PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOST}`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
    networks:
      - airflow_net





  # Apache Airflow for scheduling and ETL logic
# ---------- Airflow common (v3) ----------
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    # Running behind Traefik (Coolify)
    AIRFLOW__API__BASE_URL: https://${AIRFLOW_HOST}
    AIRFLOW__API__ENABLE_PROXY_FIX: "true"
    # Your app secrets
    OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
    # Optional: extra pip reqs at start (better to bake into image)
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - airflow_net







  # Metabase for dashboard and visualization
  metabase:
    image: metabase/metabase
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.metabase.rule=Host(`${METABASE_HOST}`)
      - traefik.http.routers.metabase.entrypoints=websecure
      - traefik.http.routers.metabase.tls=true
      - traefik.http.services.metabase.loadbalancer.server.port=3000
    networks:
      - airflow_net

# Define named volumes for persistence
volumes:
  postgres_data:

# Define shared Docker network
networks:
  airflow_net:
