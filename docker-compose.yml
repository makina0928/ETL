version: "3.9"

services:
  # PostgreSQL Database for storing weather data
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - airflow_net

  # pgAdmin for visual management of PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOST}`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
    networks:
      - airflow_net





  # Apache Airflow for scheduling and ETL logic
  airflow:
    image: apache/airflow:2.9.1-python3.11
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME: ${AIRFLOW_USER}
      AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD: ${AIRFLOW_PASSWORD}
      AIRFLOW__WEBSERVER__BASE_URL: https://${AIRFLOW_HOST}
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"   # speeds up startup
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
    command: >
      bash -lc "
        airflow db migrate &&
        airflow users create --username ${AIRFLOW_USER} --password ${AIRFLOW_PASSWORD} \
          --firstname Airflow --lastname Admin --role Admin --email admin@example.com \
          || echo 'User already exists' &&
        airflow webserver & exec airflow scheduler
      "
    healthcheck:
      test: ["CMD-SHELL","curl -sf http://localhost:8080/health | grep -q 'healthy'"]
      interval: 10s
      timeout: 5s
      retries: 30
    labels:
      - traefik.enable=true
      - traefik.http.routers.airflow.rule=Host(`${AIRFLOW_HOST}`)
      - traefik.http.routers.airflow.entrypoints=websecure
      - traefik.http.routers.airflow.tls=true
      - traefik.http.services.airflow.loadbalancer.server.port=8080
      - traefik.http.services.airflow.loadbalancer.healthcheck.path=/health
      - traefik.http.services.airflow.loadbalancer.healthcheck.interval=10s
      # If Traefik canâ€™t reach your service due to networks, uncomment and set the correct network:
      # - traefik.docker.network=airflow_net
    networks:
      - airflow_net







  # Metabase for dashboard and visualization
  metabase:
    image: metabase/metabase
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.metabase.rule=Host(`${METABASE_HOST}`)
      - traefik.http.routers.metabase.entrypoints=websecure
      - traefik.http.routers.metabase.tls=true
      - traefik.http.services.metabase.loadbalancer.server.port=3000
    networks:
      - airflow_net

# Define named volumes for persistence
volumes:
  postgres_data:

# Define shared Docker network
networks:
  airflow_net:
